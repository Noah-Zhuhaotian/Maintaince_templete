schedules:
- cron: "30 6 * * 0"
  displayName: 'Run every week'
  branches:
    include: 
    - main
  always: true

trigger:
  - none

# Replace "xxxx" with your each AKS environment name


parameters:
  - name: xxxx01
    displayName: xxxx01
    type: boolean
    default: false
  
  - name: xxxx02
    displayName: xxxx02
    type: boolean
    default: true
  
  - name: xxxx03
    displayName: xxxx03
    type: boolean
    default: true

variables:
- group: AKS-vargroup

pool:
  name: WindowsDevOps

stages:
  - ${{ if eq(parameters.xxxx01, true) }}:
    - stage: ${{ format('BackupAllPipelineRolebinding_{0}', 'xxxx01') }}
      variables: 
        - template: ${{ format('../vars/var-{0}.yml', 'xxxx01') }}
      jobs:
        - job: BackupAllPipelineRolebinding
          displayName: Backup All Pipeline Rolebinding
          steps:
          - task: Kubernetes@1
            displayName: Get Cluster Pipeline RoleBinding
            name: GetClusterPipelineRoleBinding
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].metadata.name}'

          - task: PowerShell@2
            displayName: 'Set rolebinding'
            name: SetClusterRoleBinding
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=RoleBinding;isoutput=true]$(GetClusterPipelineRoleBinding.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get Cluster Pipeline RoleBinding
            name: GetClusterServiceAccount
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.namespace=="basic-sa")].name}'

          - task: PowerShell@2
            displayName: 'Set serviceaccount'
            name: SetClusterServiceAccount
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=ServiceAccount;isoutput=true]$(GetClusterServiceAccount.KubectlOutput)"

          - task: PowerShell@2
            displayName: 'Get All Rolebinding Yaml'
            name: GetAllRolebindingYaml
            inputs:
              targetType: 'inline'
              script: |
                $rolebindingname1=$($(SetClusterRoleBinding.RoleBinding) | ForEach Split ",")
                $rolebindingname2=$($rolebindingname1 -join " ")
                $rolebindingname3=$(@($rolebindingname2 | ForEach Split " "))
                $rolebindingname=$($rolebindingname3 -match "sa-namespace-edit.*")
                $rolebindingyaml=$(@(foreach ( $k in $rolebindingname ) { "  name: "+$k }))

                $namespace1=$($rolebindingname | ForEach Split "-")
                $namespace2=$(@(for ($a = 3; $a -le ($namespace1.length - 1); $a += 6) { $namespace1[$a] }))
                $namespace3=$(@(for ($a = 4; $a -le ($namespace1.length - 1); $a += 6) { $namespace1[$a] }))
                $namespace=$(@(for ($a=0;$a -le ($namespace3.length-1);$a++) { $namespace2[$a]+"-"+$namespace3[$a] }))
                $namespaceyaml=$(@(foreach ( $k in $namespace ) { "  namespace: "+$k }))
  
                $serviceaccount1=$(@($(SetClusterServiceAccount.ServiceAccount) | ForEach Split ","))
                $serviceaccount2=$($serviceaccount1 -join " ")
                $serviceaccount3=$(@($serviceaccount2 | ForEach Split " "))
                $serviceaccount4=$($serviceaccount3 -match "sa.*")
                $serviceaccountyaml = $(@(foreach ( $k in $serviceaccount4 ) { "  name: "+$k }))

                $a1=$(@("apiVersion: rbac.authorization.k8s.io/v1","kind: RoleBinding","metadata:"))
                $a2=$($a1 -join "`n")
                $a3=$(@(foreach ( $k in $rolebindingyaml ){ $a2+"`n"+$k}))
                $a4=$(@(for ($k=0;$k -le ($rolebindingyaml.length-1);$k++) { $a3[$k]+"`n"+$namespaceyaml[$k] }))
                $a5=$(@("roleRef:","  apiGroup: rbac.authorization.k8s.io","  kind: ClusterRole","  name: sa-namespace-edit","subjects:","- kind: ServiceAccount"))
                $a6=$($a5 -join "`n")
                $a7=$(@(foreach ( $k in $a4 ){ $k+"`n"+$a6}))
                $a8=$(@(for ($k=0;$k -le ($rolebindingyaml.length-1);$k++) { $a7[$k]+"`n"+$serviceaccountyaml[$k] }))
                $a9=$(@("  namespace: basic-sa","---"))
                $a10=$($a9 -join "`n")
                $a11=$(@(foreach ( $k in $a8 ){ $k+"`n"+$a10+"`n"}))
                write-output $a11 | out-file -filepath $(System.DefaultWorkingDirectory)/Clustermanagement/ClusterRoleBinding.yaml
                Write-Host "##vso[task.setvariable variable=RolebindingYaml;isOutput=true]$a11"
                
          - publish: $(System.DefaultWorkingDirectory)/Clustermanagement/ClusterRoleBinding.yaml
            artifact: ${{ format('cluster_rolebindingYamlArtifact_{0}.yml', 'xxxx') }}

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserPipelineRoleBinding
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].metadata.name}'

          - task: PowerShell@2
            displayName: 'Set rolebinding'
            name: SetUserRoleBinding
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=RoleBinding;isoutput=true]$(GetUserPipelineRoleBinding.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserServiceAccount
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.kind=="Group")].name}'

          - task: PowerShell@2
            displayName: 'Set serviceaccount'
            name: SetUserServiceAccount
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=ServiceAccount;isoutput=true]$(GetUserServiceAccount.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserNameSpace
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.kind=="Group")].namespace}'

          - task: PowerShell@2
            displayName: 'Set User NameSpace'
            name: SetUserNameSpace
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=NameSpace;isoutput=true]$(GetUserNameSpace.KubectlOutput)"

          - task: PowerShell@2
            displayName: 'backup rolebinding'
            inputs:
              targetType: 'filePath'
              filePath: $(System.DefaultWorkingDirectory)/Clustermanagement/scripts/backup_rolebinding.ps1
              arguments:
                -ori_rolebinding_name $(SetUserRoleBinding.RoleBinding)
                -ori_namespace $(SetUserNameSpace.NameSpace)
                -ori_sa_name $(SetUserServiceAccount.ServiceAccount)
                -matchPattern 'namespace-user-*'
                -backup_yaml_path '$(System.DefaultWorkingDirectory)/Clustermanagement/UserRoleBinding.yaml'
                
          - publish: $(System.DefaultWorkingDirectory)/Clustermanagement/UserRoleBinding.yaml
            artifact: ${{ format('user_rolebindingYamlArtifact_{0}.yml', 'xxxx') }}

  - ${{ if eq(parameters.xxxx02, true) }}:
    - stage: ${{ format('BackupAllPipelineRolebinding_{0}', 'xxxx02') }}
      variables: 
        - template: ${{ format('../vars/var-{0}.yml', 'xxxx02') }}
      jobs:
        - job: BackupAllPipelineRolebinding
          displayName: Backup All Pipeline Rolebinding
          steps:
          - task: Kubernetes@1
            displayName: Get Cluster Pipeline RoleBinding
            name: GetClusterPipelineRoleBinding
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].metadata.name}'

          - task: PowerShell@2
            displayName: 'Set rolebinding'
            name: SetClusterRoleBinding
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=RoleBinding;isoutput=true]$(GetClusterPipelineRoleBinding.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get Cluster Pipeline RoleBinding
            name: GetClusterServiceAccount
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.namespace=="basic-sa")].name}'

          - task: PowerShell@2
            displayName: 'Set serviceaccount'
            name: SetClusterServiceAccount
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=ServiceAccount;isoutput=true]$(GetClusterServiceAccount.KubectlOutput)"

          - task: PowerShell@2
            displayName: 'Get All Rolebinding Yaml'
            name: GetAllRolebindingYaml
            inputs:
              targetType: 'inline'
              script: |
                $rolebindingname1=$($(SetClusterRoleBinding.RoleBinding) | ForEach Split ",")
                $rolebindingname2=$($rolebindingname1 -join " ")
                $rolebindingname3=$(@($rolebindingname2 | ForEach Split " "))
                $rolebindingname=$($rolebindingname3 -match "sa-namespace-edit.*")
                $rolebindingyaml=$(@(foreach ( $k in $rolebindingname ) { "  name: "+$k }))

                $namespace1=$($rolebindingname | ForEach Split "-")
                $namespace2=$(@(for ($a = 3; $a -le ($namespace1.length - 1); $a += 6) { $namespace1[$a] }))
                $namespace3=$(@(for ($a = 4; $a -le ($namespace1.length - 1); $a += 6) { $namespace1[$a] }))
                $namespace=$(@(for ($a=0;$a -le ($namespace3.length-1);$a++) { $namespace2[$a]+"-"+$namespace3[$a] }))
                $namespaceyaml=$(@(foreach ( $k in $namespace ) { "  namespace: "+$k }))
  
                $serviceaccount1=$(@($(SetClusterServiceAccount.ServiceAccount) | ForEach Split ","))
                $serviceaccount2=$($serviceaccount1 -join " ")
                $serviceaccount3=$(@($serviceaccount2 | ForEach Split " "))
                $serviceaccount4=$($serviceaccount3 -match "sa.*")
                $serviceaccountyaml = $(@(foreach ( $k in $serviceaccount4 ) { "  name: "+$k }))

                $a1=$(@("apiVersion: rbac.authorization.k8s.io/v1","kind: RoleBinding","metadata:"))
                $a2=$($a1 -join "`n")
                $a3=$(@(foreach ( $k in $rolebindingyaml ){ $a2+"`n"+$k}))
                $a4=$(@(for ($k=0;$k -le ($rolebindingyaml.length-1);$k++) { $a3[$k]+"`n"+$namespaceyaml[$k] }))
                $a5=$(@("roleRef:","  apiGroup: rbac.authorization.k8s.io","  kind: ClusterRole","  name: sa-namespace-edit","subjects:","- kind: ServiceAccount"))
                $a6=$($a5 -join "`n")
                $a7=$(@(foreach ( $k in $a4 ){ $k+"`n"+$a6}))
                $a8=$(@(for ($k=0;$k -le ($rolebindingyaml.length-1);$k++) { $a7[$k]+"`n"+$serviceaccountyaml[$k] }))
                $a9=$(@("  namespace: basic-sa","---"))
                $a10=$($a9 -join "`n")
                $a11=$(@(foreach ( $k in $a8 ){ $k+"`n"+$a10+"`n"}))
                write-output $a11 | out-file -filepath $(System.DefaultWorkingDirectory)/Clustermanagement/ClusterRoleBinding.yaml
                Write-Host "##vso[task.setvariable variable=RolebindingYaml;isOutput=true]$a11"
                
          - publish: $(System.DefaultWorkingDirectory)/Clustermanagement/ClusterRoleBinding.yaml
            artifact: ${{ format('cluster_rolebindingYamlArtifact_{0}.yml', 'xxxx') }}

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserPipelineRoleBinding
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].metadata.name}'

          - task: PowerShell@2
            displayName: 'Set rolebinding'
            name: SetUserRoleBinding
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=RoleBinding;isoutput=true]$(GetUserPipelineRoleBinding.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserServiceAccount
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.kind=="Group")].name}'

          - task: PowerShell@2
            displayName: 'Set serviceaccount'
            name: SetUserServiceAccount
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=ServiceAccount;isoutput=true]$(GetUserServiceAccount.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserNameSpace
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.kind=="Group")].namespace}'

          - task: PowerShell@2
            displayName: 'Set User NameSpace'
            name: SetUserNameSpace
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=NameSpace;isoutput=true]$(GetUserNameSpace.KubectlOutput)"

          - task: PowerShell@2
            inputs:
              targetType: 'filePath'
              filePath: $(System.DefaultWorkingDirectory)/Clustermanagement/scripts/backup_rolebinding.ps1
              arguments:
                -ori_rolebinding_name $(SetUserRoleBinding.RoleBinding)
                -ori_namespace $(SetUserNameSpace.NameSpace)
                -ori_sa_name $(SetUserServiceAccount.ServiceAccount)
                -matchPattern 'namespace-user-*'
                -backup_yaml_path '$(System.DefaultWorkingDirectory)/Clustermanagement/UserRoleBinding.yaml'
                
          - publish: $(System.DefaultWorkingDirectory)/Clustermanagement/UserRoleBinding.yaml
            artifact: ${{ format('user_rolebindingYamlArtifact_{0}.yml', 'xxxx') }}


  - ${{ if eq(parameters.xxxx03, true) }}:
    - stage: ${{ format('BackupAllPipelineRolebinding_{0}', 'xxxx03') }}
      variables: 
        - template: ${{ format('../vars/var-{0}.yml', 'xxxx03') }}
      jobs:
        - job: BackupAllPipelineRolebinding
          displayName: Backup All Pipeline Rolebinding
          steps:
          - task: Kubernetes@1
            displayName: Get Cluster Pipeline RoleBinding
            name: GetClusterPipelineRoleBinding
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].metadata.name}'

          - task: PowerShell@2
            displayName: 'Set rolebinding'
            name: SetClusterRoleBinding
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=RoleBinding;isoutput=true]$(GetClusterPipelineRoleBinding.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get Cluster Pipeline RoleBinding
            name: GetClusterServiceAccount
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.namespace=="basic-sa")].name}'

          - task: PowerShell@2
            displayName: 'Set serviceaccount'
            name: SetClusterServiceAccount
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=ServiceAccount;isoutput=true]$(GetClusterServiceAccount.KubectlOutput)"

          - task: PowerShell@2
            displayName: 'Get All Rolebinding Yaml'
            name: GetAllRolebindingYaml
            inputs:
              targetType: 'inline'
              script: |
                $rolebindingname1=$($(SetClusterRoleBinding.RoleBinding) | ForEach Split ",")
                $rolebindingname2=$($rolebindingname1 -join " ")
                $rolebindingname3=$(@($rolebindingname2 | ForEach Split " "))
                $rolebindingname=$($rolebindingname3 -match "sa-namespace-edit.*")
                $rolebindingyaml=$(@(foreach ( $k in $rolebindingname ) { "  name: "+$k }))

                $namespace1=$($rolebindingname | ForEach Split "-")
                $namespace2=$(@(for ($a = 3; $a -le ($namespace1.length - 1); $a += 6) { $namespace1[$a] }))
                $namespace3=$(@(for ($a = 4; $a -le ($namespace1.length - 1); $a += 6) { $namespace1[$a] }))
                $namespace=$(@(for ($a=0;$a -le ($namespace3.length-1);$a++) { $namespace2[$a]+"-"+$namespace3[$a] }))
                $namespaceyaml=$(@(foreach ( $k in $namespace ) { "  namespace: "+$k }))
  
                $serviceaccount1=$(@($(SetClusterServiceAccount.ServiceAccount) | ForEach Split ","))
                $serviceaccount2=$($serviceaccount1 -join " ")
                $serviceaccount3=$(@($serviceaccount2 | ForEach Split " "))
                $serviceaccount4=$($serviceaccount3 -match "sa.*")
                $serviceaccountyaml = $(@(foreach ( $k in $serviceaccount4 ) { "  name: "+$k }))

                $a1=$(@("apiVersion: rbac.authorization.k8s.io/v1","kind: RoleBinding","metadata:"))
                $a2=$($a1 -join "`n")
                $a3=$(@(foreach ( $k in $rolebindingyaml ){ $a2+"`n"+$k}))
                $a4=$(@(for ($k=0;$k -le ($rolebindingyaml.length-1);$k++) { $a3[$k]+"`n"+$namespaceyaml[$k] }))
                $a5=$(@("roleRef:","  apiGroup: rbac.authorization.k8s.io","  kind: ClusterRole","  name: sa-namespace-edit","subjects:","- kind: ServiceAccount"))
                $a6=$($a5 -join "`n")
                $a7=$(@(foreach ( $k in $a4 ){ $k+"`n"+$a6}))
                $a8=$(@(for ($k=0;$k -le ($rolebindingyaml.length-1);$k++) { $a7[$k]+"`n"+$serviceaccountyaml[$k] }))
                $a9=$(@("  namespace: basic-sa","---"))
                $a10=$($a9 -join "`n")
                $a11=$(@(foreach ( $k in $a8 ){ $k+"`n"+$a10+"`n"}))
                write-output $a11 | out-file -filepath $(System.DefaultWorkingDirectory)/Clustermanagement/ClusterRoleBinding.yaml
                Write-Host "##vso[task.setvariable variable=RolebindingYaml;isOutput=true]$a11"
                
          - publish: $(System.DefaultWorkingDirectory)/Clustermanagement/ClusterRoleBinding.yaml
            artifact: ${{ format('cluster_rolebindingYamlArtifact_{0}.yml', 'xxxx') }}

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserPipelineRoleBinding
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].metadata.name}'

          - task: PowerShell@2
            displayName: 'Set rolebinding'
            name: SetUserRoleBinding
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=RoleBinding;isoutput=true]$(GetUserPipelineRoleBinding.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserServiceAccount
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.kind=="Group")].name}'

          - task: PowerShell@2
            displayName: 'Set serviceaccount'
            name: SetUserServiceAccount
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=ServiceAccount;isoutput=true]$(GetUserServiceAccount.KubectlOutput)"

          - task: Kubernetes@1
            displayName: Get User Pipeline RoleBinding
            name: GetUserNameSpace
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.backupEndpointName }}
              command: get
              arguments: rolebinding -A
              outputFormat: jsonpath='{.items[*].subjects[?(@.kind=="Group")].namespace}'

          - task: PowerShell@2
            displayName: 'Set User NameSpace'
            name: SetUserNameSpace
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=NameSpace;isoutput=true]$(GetUserNameSpace.KubectlOutput)"

          - task: PowerShell@2
            inputs:
              targetType: 'filePath'
              filePath: $(System.DefaultWorkingDirectory)/Clustermanagement/scripts/backup_rolebinding.ps1
              arguments:
                -ori_rolebinding_name $(SetUserRoleBinding.RoleBinding)
                -ori_namespace $(SetUserNameSpace.NameSpace)
                -ori_sa_name $(SetUserServiceAccount.ServiceAccount)
                -matchPattern 'namespace-user-*'
                -backup_yaml_path '$(System.DefaultWorkingDirectory)/Clustermanagement/UserRoleBinding.yaml'
                
          - publish: $(System.DefaultWorkingDirectory)/Clustermanagement/UserRoleBinding.yaml
            artifact: ${{ format('user_rolebindingYamlArtifact_{0}.yml', 'xxxx') }}