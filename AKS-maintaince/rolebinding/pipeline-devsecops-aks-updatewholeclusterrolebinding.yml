trigger:
  - none

# Replace "xxxx" with your each AKS environment name


parameters:
  - name: EnvName
    displayName: EnvName
    type: string
    default: xxxx
    values:
    - xxxx
    - xxxx
    - xxxx


variables:
- group: AKS-vargroup
- template: ../vars/var-${{ parameters.EnvName }}.yml

pool:
  name: WindowsDevOps

stages:
  - stage: UpdateAllPipelineRolebinding
    jobs:
      - job: UpdateAllPipelineRolebinding
        displayName: Update All Pipeline Rolebinding
        steps:
        - task: Kubernetes@1
          displayName: Get Pipeline RoleBinding
          name: GetPipelineRoleBinding
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ variables.serviceEndpointName }}
            command: get
            arguments: rolebinding -A
            outputFormat: jsonpath='{.items[*].metadata.name}'

        - task: PowerShell@2
          displayName: 'Set rolebinding'
          name: Setrolebinding
          inputs:
            pwsh: true
            targetType: 'inline'
            script: |
              Write-Host "##vso[task.setvariable variable=RoleBinding;isoutput=true]$(GetPipelineRoleBinding.KubectlOutput)"

        - task: Kubernetes@1
          displayName: Get Pipeline RoleBinding
          name: GetServiceaccount
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ variables.serviceEndpointName }}
            command: get
            arguments: rolebinding -A
            outputFormat: jsonpath='{.items[*].subjects[?(@.namespace=="basic-sa")].name}'

        - task: PowerShell@2
          displayName: 'Set serviceaccount'
          name: Setserviceaccount
          inputs:
            pwsh: true
            targetType: 'inline'
            script: |
              Write-Host "##vso[task.setvariable variable=Serviceaccount;isoutput=true]$(GetServiceaccount.KubectlOutput)"

        - task: PowerShell@2
          displayName: 'Get All Rolebinding Yaml'
          name: GetAllRolebindingYaml
          inputs:
            targetType: 'inline'
            script: |
              $rolebindingname1=$(Setrolebinding.RoleBinding).Trim(",").replace(","," ").replace("  "," ").Trim()
              $rolebindingname2=$(@($rolebindingname1 | ForEach Split " "))
              $rolebindingname=$($rolebindingname2 -match "sa-namespace-edit.*")
              echo $rolebindingname
              $rolebindingyaml=$(@(foreach ( $k in $rolebindingname ) { "  name: "+$k }))

              $namespace1=$($rolebindingname | ForEach Split "-")
              $namespace2=$(@(for ($a = 3; $a -le ($namespace1.length - 1); $a += 6) { $namespace1[$a] }))
              $namespace3=$(@(for ($a = 4; $a -le ($namespace1.length - 1); $a += 6) { $namespace1[$a] }))
              $namespace=$(@(for ($a=0;$a -le ($namespace3.length-1);$a++) { $namespace2[$a]+"-"+$namespace3[$a] }))
              $namespaceyaml=$(@(foreach ( $k in $namespace ) { "  namespace: "+$k }))
 
              $serviceaccount1=$(@($(Setserviceaccount.Serviceaccount) | ForEach Split ","))
              $serviceaccount2=$($serviceaccount1 -join " ")
              $serviceaccount3=$(@($serviceaccount2 | ForEach Split " "))
              $serviceaccount4=$($serviceaccount3 -match "sa.*")
              $serviceaccountyaml = $(@(foreach ( $k in $serviceaccount4 ) { "  name: "+$k }))

              $a1=$(@("apiVersion: rbac.authorization.k8s.io/v1","kind: RoleBinding","metadata:"))
              $a2=$($a1 -join "`n")
              $a3=$(@(foreach ( $k in $rolebindingyaml ){ $a2+"`n"+$k}))
              $a4=$(@(for ($k=0;$k -le ($rolebindingyaml.length-1);$k++) { $a3[$k]+"`n"+$namespaceyaml[$k] }))
              $a5=$(@("roleRef:","  apiGroup: rbac.authorization.k8s.io","  kind: ClusterRole","  name: sa-namespace-edit","subjects:","- kind: ServiceAccount"))
              $a6=$($a5 -join "`n")
              $a7=$(@(foreach ( $k in $a4 ){ $k+"`n"+$a6}))
              $a8=$(@(for ($k=0;$k -le ($rolebindingyaml.length-1);$k++) { $a7[$k]+"`n"+$serviceaccountyaml[$k] }))
              $a9=$(@("  namespace: basic-sa","---"))
              $a10=$($a9 -join "`n")
              $a11=$(@(foreach ( $k in $a8 ){ $k+"`n"+$a10+"`n"}))
              write-output $a11 | out-file -filepath $(System.DefaultWorkingDirectory)/rolebinding/rolebinding.yaml
              Write-Host "##vso[task.setvariable variable=RolebindingYaml;isOutput=true]$a11"

        - publish: $(System.DefaultWorkingDirectory)/rolebinding/rolebinding.yaml
          artifact: rolebindingYamlArtifact

        - task: Kubernetes@1
          displayName: kubectl delete pipeline rolebinding
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ variables.serviceEndpointName }}
            command: delete
            useConfigurationFile: true
            configuration: '$(System.DefaultWorkingDirectory)/rolebinding/rolebinding.yaml'


        - task: Kubernetes@1
          displayName: kubectl apply clusterrole
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ variables.serviceEndpointName }}
            command: apply
            useConfigurationFile: true
            configurationType: inline
            inline: |
              kind: ClusterRole
              apiVersion: rbac.authorization.k8s.io/v1
              metadata:
                name: sa-namespace-edit
              rules:
              - apiGroups: ["*"]
                resources: [$(roles)]
                verbs: ["*"]
        
        - task: Kubernetes@1
          displayName: kubectl apply pipeline rolebinding
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ variables.serviceEndpointName }}
            command: apply
            useConfigurationFile: true
            configuration: '$(System.DefaultWorkingDirectory)/rolebinding/rolebinding.yaml'


      
