parameters:
  jobEnv: ''
  serviceEndpointName: ''

jobs:
  - deployment: DeployInfra
    displayName: DeployInfra
    pool:
      vmImage: 'windows-latest'
    condition: and(succeeded(), eq(variables['provision'], 'true'))
    environment: ${{ parameters.jobEnv }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
              displayName: 'Install Terraform'
              inputs:
                terraformVersion: $(terraformVersion)

            - task: qetza.replacetokens.replacetokens-task.replacetokens@3
              displayName: 'Replace value in Terraform'
              inputs:
                targetFiles: '$(serviceName)/release/pipeline-default/steps/deploy-infra/*.tf*'
                tokenPrefix: '__'
                tokenSuffix: '__'

            - task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
              displayName: 'Terraform Initialization'
              inputs:
                TemplatePath: '$(serviceName)/release/pipeline-default/steps/deploy-infra'
                Arguments: 'init'
                InstallTerraform: false
                Version: $(terraformVersion)
                UseAzureSub: true
                ConnectedServiceNameARM: ${{ parameters.serviceEndpointName }}

            - task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
              displayName: 'Terraform plan'
              inputs:
                TemplatePath: '$(serviceName)/release/pipeline-default/steps/deploy-infra'
                Arguments: 'plan  -var-file=vars.tfvars -out=tfplan'
                InstallTerraform: false
                Version: $(terraformVersion)
                UseAzureSub: true
                ConnectedServiceNameARM: ${{ parameters.serviceEndpointName }}

            - task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
              displayName: 'Terraform apply'
              inputs:
                TemplatePath: '$(serviceName)/release/pipeline-default/steps/deploy-infra'
                Arguments: 'apply  -var-file=vars.tfvars -auto-approve'
                InstallTerraform: false
                Version: $(terraformVersion)
                UseAzureSub: true
                ConnectedServiceNameARM: ${{ parameters.serviceEndpointName }}

            - task: AzurePowerShell@4
              displayName: 'Configure App Service Network Access Restriction Rules'
              inputs:
                ScriptType: InlineScript
                Inline: |
                  $enabled = "$(accessRulesEnabled)"                  
                  if ($enabled -eq "true") {
                    $(System.DefaultWorkingDirectory)\$(serviceName)\release\scripts\NetworkAccessRestrictions\AllowOnlyAkamaiTraffic.ps1 -ResourceGroupName $(resourceGroupName) -AppServiceName $(resourceName)              
                  }
                azurePowerShellVersion: LatestVersion
                ConnectedServiceNameARM: ${{ parameters.serviceEndpointName }}

            - task: AzureCLI@1
              displayName: 'Get Azure Resource value'
              inputs:
                azureSubscription: ${{ parameters.serviceEndpointName }}
                scriptPath: $(System.DefaultWorkingDirectory)/$(serviceName)/release/scripts/getAzureResource.bat
              continueOnError: true

            - task: PowerShell@2
              displayName: 'Update Azure Resource value to repository'
              inputs:
                targetType: filePath
                filePath: $(System.DefaultWorkingDirectory)/$(serviceName)/release/scripts/updateRepositoryValue.ps1
                arguments: '-repositoryCallbackUrl $(repositoryCallbackUrl) -clientId $(portalClientId) -clientKey $(portalClientKey)'
