jobs:
  #Begin code scan
  - job: ScanSonarqube
    pool: 
      vmImage: 'windows-latest'
    steps:
      #Begin SonarQube
      - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@5
        condition: and(succeeded(), eq(variables['enableSonarqube'], 'true'))
        displayName: 'Prepare analysis on SonarQube '
        inputs:
          SonarQube: SonarQube
          projectKey: '$(serviceName)'
          projectName: '$(appNumber)-$(serviceName)'
          extraProperties: |
            sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/TestResults/*.trx
            sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)/TestResults/*/*.coveragexml
            sonar.verbose=true
        continueOnError: true

      - task: UseDotNet@2
        condition: and(succeeded(), eq(variables['enableSonarqube'], 'true'))
        displayName: 'Use dotnet sdk 6.0.x'
        inputs:
          version: 6.0.x
          installationPath: '$(Agent.TempDirectory)/dotnet'

      - task: DotNetCoreCLI@2
        condition: and(succeeded(), eq(variables['enableSonarqube'], 'true'))
        displayName: 'dotnet restore'
        inputs:
          command: restore
          projects: '$(serviceName)/source/**/*.csproj'

      - task: DotNetCoreCLI@2
        condition: and(succeeded(), eq(variables['enableSonarqube'], 'true'))
        displayName: 'dotnet build'
        inputs:
          projects: '$(serviceName)/source/**/*.csproj'

      - task: VSTest@2
        condition: and(succeeded(), eq(variables['enableSonarqube'], 'true'))
        displayName: 'Unit Test'
        inputs:
          testAssemblyVer2: |
            **\*.Test.dll
            !**\*TestAdapter.dll
            !**\obj\**
            !**\bin\**\ref\**
          codeCoverageEnabled: True
          failOnMinTestsNotRun: False

      - task: PowerShell@2
        condition: and(succeeded(), eq(variables['enableSonarqube'], 'true'))
        displayName: 'Covert coverage to coveragexml'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host $(Agent.TempDirectory)
            $paths = $(Resolve-Path -path "$(Agent.TempDirectory)/TestResults/*" -r)
            foreach ($path in $paths) {
                write-host $path
                $file_count = $(ls $path -Recurse | Measure-Object).Count
                if ($file_count -ne 0) {
                    cd $path
                    Get-ChildItem –Recurse –Filter "*.coverage" | % {
                        $outfile = "$([System.IO.Path]::GetFileNameWithoutExtension($_.FullName)).coveragexml"
                        $output = [System.IO.Path]::Combine([System.IO.Path]::GetDirectoryName($_.FullName), $outfile)
                        "Analyse '$($_.Name)' with output '$outfile'…"
                        . $env:USERPROFILE\.nuget\packages\microsoft.codecoverage\16.7.1\build\netstandard1.0\CodeCoverage\CodeCoverage.exe analyze /output:$output $_.FullName 
                    }
                    break
                }
            }
            Write-Host "Done Conversion"
        continueOnError: true
        
      - task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@5
        condition: and(succeeded(), eq(variables['enableSonarqube'], 'true'))
        displayName: 'Run Code Analysis'
        continueOnError: true
      #End SonarQube      
#End code scan